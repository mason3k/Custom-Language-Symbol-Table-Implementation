
//----------------------------------------------------
// The following code was generated by CUP v0.10f
// Tue Nov 06 13:28:07 CST 2018
//----------------------------------------------------

import java_cup.runtime.*;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 5},     {21, 2},     {21, 1},     {20, 2}, 
        {20, 0},     {24, 9},     {24, 10},     {24, 9},     {24, 10}, 
        {23, 3},     {23, 1},     {22, 2},     {22, 4},     {7, 2}, 
        {7, 0},     {8, 3},     {8, 5},     {8, 6},     {8, 5}, 
        {9, 1},     {9, 1},     {9, 1},     {2, 2},     {2, 0}, 
        {3, 4},     {3, 5},     {3, 7},     {3, 5},     {3, 7}, 
        {3, 5},     {3, 3},     {3, 3},     {3, 5},     {3, 5}, 
        {3, 2},     {3, 3},     {3, 3},     {3, 3},     {3, 4}, 
        {3, 5},     {19, 3},     {19, 1},     {18, 3},     {18, 1}, 
        {17, 3},     {17, 1},     {4, 3},     {4, 3},     {4, 3}, 
        {4, 3},     {4, 1},     {16, 3},     {16, 3},     {16, 3}, 
        {16, 3},     {16, 3},     {16, 3},     {16, 1},     {15, 3}, 
        {15, 3},     {15, 1},     {14, 3},     {14, 3},     {14, 1}, 
        {13, 1},     {13, 2},     {13, 4},     {5, 3},     {5, 1}, 
        {5, 1},     {5, 1},     {5, 1},     {5, 1},     {5, 1}, 
        {5, 3},     {5, 4},     {5, 1},     {12, 1},     {12, 4}, 
        {6, 1},     {11, 1},     {10, 1},     {10, 0}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{34,3,-1,0},
    /*1*/{0,203,-1,0},
    /*2*/{2,4,-1,0},
    /*3*/{4,-81,5,-81,6,-81,7,-81,8,-81,10,-81,11,-81,12,-81,13,-81,14,-81,16,-81,17,-81,21,-81,22,-81,25,-81,26,-81,27,-81,28,-81,29,-81,30,-81,31,-81,32,-81,33,-81,38,-81,39,-81,-1,0},
    /*4*/{8,6,-1,0},
    /*5*/{9,-6,18,16,19,11,23,7,24,14,40,8,-1,0},
    /*6*/{2,-23,6,-23,-1,0},
    /*7*/{2,4,-1,0},
    /*8*/{9,-6,18,16,19,11,23,7,24,14,-1,0},
    /*9*/{9,195,-1,0},
    /*10*/{2,-22,6,-22,-1,0},
    /*11*/{9,-6,18,16,19,11,23,7,24,14,40,8,-1,0},
    /*12*/{9,-4,-1,0},
    /*13*/{2,4,-1,0},
    /*14*/{2,4,-1,0},
    /*15*/{2,-21,6,-21,-1,0},
    /*16*/{4,18,5,19,7,21,22,20,-1,0},
    /*17*/{2,-17,8,-17,9,-17,15,-17,18,-17,19,-17,20,-17,23,-17,24,-17,40,-17,41,-17,42,-17,43,-17,44,-17,45,-17,-1,0},
    /*18*/{6,88,18,16,19,11,23,7,-1,0},
    /*19*/{3,29,-1,0},
    /*20*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*21*/{4,-72,6,-72,11,-72,12,-72,13,-72,14,-72,16,-72,17,-72,21,-72,25,-72,26,-72,27,-72,28,-72,29,-72,30,-72,31,-72,32,-72,33,-72,-1,0},
    /*22*/{4,-74,6,-74,11,-74,12,-74,13,-74,14,-74,16,-74,17,-74,21,-74,25,-74,26,-74,27,-74,28,-74,29,-74,30,-74,31,-74,32,-74,33,-74,-1,0},
    /*23*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*24*/{4,-75,6,-75,11,-75,12,-75,13,-75,14,-75,16,-75,17,-75,21,-75,25,-75,26,-75,27,-75,28,-75,29,-75,30,-75,31,-75,32,-75,33,-75,-1,0},
    /*25*/{4,82,29,65,30,62,31,66,32,63,-1,0},
    /*26*/{2,4,3,29,5,27,18,16,19,11,23,7,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*27*/{4,-65,6,-65,11,-65,12,-65,13,-65,14,-65,16,-65,17,-65,21,-65,25,-65,26,-65,27,-65,28,-65,29,-65,30,-65,31,-65,32,-65,33,-65,-1,0},
    /*28*/{4,-82,6,-82,11,-82,12,-82,13,-82,14,-82,16,-82,17,-82,21,-82,25,-82,26,-82,27,-82,28,-82,29,-82,30,-82,31,-82,32,-82,33,-82,-1,0},
    /*29*/{4,-79,5,59,6,-79,11,-79,12,-79,13,-79,14,-79,16,-79,17,-79,21,-79,22,60,25,-79,26,-79,27,-79,28,-79,29,-79,30,-79,31,-79,32,-79,33,-79,-1,0},
    /*30*/{4,-62,6,-62,11,-62,12,-62,13,-62,14,-62,16,49,17,48,21,-62,25,-62,26,-62,27,-62,28,-62,29,-62,30,-62,31,-62,32,-62,33,-62,-1,0},
    /*31*/{4,-66,6,-66,11,-66,12,-66,13,-66,14,-66,16,-66,17,-66,21,-66,25,-66,26,-66,27,-66,28,-66,29,-66,30,-66,31,-66,32,-66,33,-66,-1,0},
    /*32*/{4,-70,6,-70,11,-70,12,-70,13,-70,14,-70,16,-70,17,-70,21,-70,25,-70,26,-70,27,-70,28,-70,29,-70,30,-70,31,-70,32,-70,33,-70,-1,0},
    /*33*/{4,-59,6,-59,11,43,12,46,13,40,14,45,21,-59,25,41,26,39,27,44,28,42,29,-59,30,-59,31,-59,32,-59,33,-59,-1,0},
    /*34*/{4,-52,6,-52,21,-52,29,-52,30,-52,31,-52,32,-52,33,-52,-1,0},
    /*35*/{4,-71,6,-71,11,-71,12,-71,13,-71,14,-71,16,-71,17,-71,21,-71,25,-71,26,-71,27,-71,28,-71,29,-71,30,-71,31,-71,32,-71,33,-71,-1,0},
    /*36*/{4,-73,6,-73,11,-73,12,-73,13,-73,14,-73,16,-73,17,-73,21,-73,25,-73,26,-73,27,-73,28,-73,29,-73,30,-73,31,-73,32,-73,33,-73,-1,0},
    /*37*/{4,-78,6,-78,11,-78,12,-78,13,-78,14,-78,16,-78,17,-78,21,-78,25,-78,26,-78,27,-78,28,-78,29,-78,30,-78,31,-78,32,-78,33,-78,-1,0},
    /*38*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*39*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*40*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*41*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*42*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*43*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*44*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*45*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*46*/{4,-61,6,-61,11,-61,12,-61,13,-61,14,-61,16,49,17,48,21,-61,25,-61,26,-61,27,-61,28,-61,29,-61,30,-61,31,-61,32,-61,33,-61,-1,0},
    /*47*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*48*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*49*/{4,-63,6,-63,11,-63,12,-63,13,-63,14,-63,16,-63,17,-63,21,-63,25,-63,26,-63,27,-63,28,-63,29,-63,30,-63,31,-63,32,-63,33,-63,-1,0},
    /*50*/{4,-64,6,-64,11,-64,12,-64,13,-64,14,-64,16,-64,17,-64,21,-64,25,-64,26,-64,27,-64,28,-64,29,-64,30,-64,31,-64,32,-64,33,-64,-1,0},
    /*51*/{4,-58,6,-58,11,43,12,46,21,-58,29,-58,30,-58,31,-58,32,-58,33,-58,-1,0},
    /*52*/{4,-55,6,-55,11,43,12,46,21,-55,29,-55,30,-55,31,-55,32,-55,33,-55,-1,0},
    /*53*/{4,-60,6,-60,11,-60,12,-60,13,-60,14,-60,16,49,17,48,21,-60,25,-60,26,-60,27,-60,28,-60,29,-60,30,-60,31,-60,32,-60,33,-60,-1,0},
    /*54*/{4,-56,6,-56,11,43,12,46,21,-56,29,-56,30,-56,31,-56,32,-56,33,-56,-1,0},
    /*55*/{4,-54,6,-54,11,43,12,46,21,-54,29,-54,30,-54,31,-54,32,-54,33,-54,-1,0},
    /*56*/{4,-57,6,-57,11,43,12,46,21,-57,29,-57,30,-57,31,-57,32,-57,33,-57,-1,0},
    /*57*/{4,-53,6,-53,11,43,12,46,21,-53,29,-53,30,-53,31,-53,32,-53,33,-53,-1,0},
    /*58*/{2,4,3,29,5,27,6,72,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*59*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*60*/{21,64,29,65,30,62,31,66,32,63,-1,0},
    /*61*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*62*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*63*/{4,-80,6,-80,7,-80,11,-80,12,-80,13,-80,14,-80,16,-80,17,-80,21,-80,25,-80,26,-80,27,-80,28,-80,29,-80,30,-80,31,-80,32,-80,33,-80,38,-80,39,-80,-1,0},
    /*64*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*65*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*66*/{4,-50,6,-50,21,-50,29,-50,30,-50,31,-50,32,-50,33,-50,-1,0},
    /*67*/{4,-48,6,-48,21,-48,29,-48,30,-48,31,-48,32,-48,33,-48,-1,0},
    /*68*/{4,-51,6,-51,21,-51,29,-51,30,-51,31,-51,32,-51,33,-51,-1,0},
    /*69*/{4,-49,6,-49,21,-49,29,-49,30,-49,31,-49,32,-49,33,-49,-1,0},
    /*70*/{6,76,-1,0},
    /*71*/{4,-76,6,-76,11,-76,12,-76,13,-76,14,-76,16,-76,17,-76,21,-76,25,-76,26,-76,27,-76,28,-76,29,-76,30,-76,31,-76,32,-76,33,-76,-1,0},
    /*72*/{6,-43,29,65,30,62,31,66,32,63,33,74,-1,0},
    /*73*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*74*/{6,-42,-1,0},
    /*75*/{4,-77,6,-77,11,-77,12,-77,13,-77,14,-77,16,-77,17,-77,21,-77,25,-77,26,-77,27,-77,28,-77,29,-77,30,-77,31,-77,32,-77,33,-77,-1,0},
    /*76*/{6,80,-1,0},
    /*77*/{6,79,29,65,30,62,31,66,32,63,-1,0},
    /*78*/{4,-69,6,-69,11,-69,12,-69,13,-69,14,-69,16,-69,17,-69,21,-69,25,-69,26,-69,27,-69,28,-69,29,-69,30,-69,31,-69,32,-69,33,-69,-1,0},
    /*79*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*80*/{4,-68,6,-68,11,-68,12,-68,13,-68,14,-68,16,-68,17,-68,21,-68,25,-68,26,-68,27,-68,28,-68,29,-68,30,-68,31,-68,32,-68,33,-68,-1,0},
    /*81*/{2,-18,8,-18,9,-18,15,-18,18,-18,19,-18,20,-18,23,-18,24,-18,40,-18,41,-18,42,-18,43,-18,44,-18,45,-18,-1,0},
    /*82*/{4,-67,6,-67,11,-67,12,-67,13,-67,14,-67,16,-67,17,-67,21,-67,25,-67,26,-67,27,-67,28,-67,29,-67,30,-67,31,-67,32,-67,33,-67,-1,0},
    /*83*/{21,85,-1,0},
    /*84*/{4,86,-1,0},
    /*85*/{2,-19,8,-19,9,-19,15,-19,18,-19,19,-19,20,-19,23,-19,24,-19,40,-19,41,-19,42,-19,43,-19,44,-19,45,-19,-1,0},
    /*86*/{6,-12,33,177,-1,0},
    /*87*/{8,172,-1,0},
    /*88*/{2,4,-1,0},
    /*89*/{6,91,-1,0},
    /*90*/{8,92,-1,0},
    /*91*/{2,-16,8,-16,9,-16,15,-16,18,16,19,11,20,-16,23,7,40,8,41,-16,42,-16,43,-16,44,-16,45,-16,-1,0},
    /*92*/{2,-16,8,-16,9,-16,15,-16,18,16,19,11,20,-16,23,7,40,8,41,-16,42,-16,43,-16,44,-16,45,-16,-1,0},
    /*93*/{2,4,-1,0},
    /*94*/{2,4,8,100,9,-25,15,101,20,105,41,106,42,98,43,103,44,96,45,107,-1,0},
    /*95*/{2,4,-1,0},
    /*96*/{9,163,-1,0},
    /*97*/{5,155,-1,0},
    /*98*/{7,150,38,149,39,148,-1,0},
    /*99*/{2,-16,8,-16,9,-16,15,-16,18,16,19,11,20,-16,23,7,40,8,41,-16,42,-16,43,-16,44,-16,45,-16,-1,0},
    /*100*/{5,137,-1,0},
    /*101*/{2,4,8,100,9,-25,15,101,20,105,41,106,42,98,43,103,44,96,45,107,-1,0},
    /*102*/{2,4,3,29,4,133,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*103*/{5,122,7,-79,10,121,22,60,38,-79,39,-79,-1,0},
    /*104*/{5,117,-1,0},
    /*105*/{5,110,-1,0},
    /*106*/{2,4,-1,0},
    /*107*/{4,109,-1,0},
    /*108*/{2,-39,8,-39,9,-39,15,-39,20,-39,41,-39,42,-39,43,-39,44,-39,45,-39,46,-39,-1,0},
    /*109*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*110*/{6,-47,29,65,30,62,31,66,32,63,33,115,-1,0},
    /*111*/{6,113,-1,0},
    /*112*/{4,114,-1,0},
    /*113*/{2,-35,8,-35,9,-35,15,-35,20,-35,41,-35,42,-35,43,-35,44,-35,45,-35,46,-35,-1,0},
    /*114*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*115*/{6,-46,-1,0},
    /*116*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*117*/{6,119,29,65,30,62,31,66,32,63,-1,0},
    /*118*/{2,4,8,100,15,101,20,105,41,106,42,98,43,103,44,96,45,107,-1,0},
    /*119*/{2,-29,8,-29,9,-29,15,-29,20,-29,41,-29,42,-29,43,-29,44,-29,45,-29,46,-29,-1,0},
    /*120*/{20,128,-1,0},
    /*121*/{2,4,3,29,5,27,6,124,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*122*/{6,126,-1,0},
    /*123*/{4,125,-1,0},
    /*124*/{2,-40,8,-40,9,-40,15,-40,20,-40,41,-40,42,-40,43,-40,44,-40,45,-40,46,-40,-1,0},
    /*125*/{4,127,-1,0},
    /*126*/{2,-41,8,-41,9,-41,15,-41,20,-41,41,-41,42,-41,43,-41,44,-41,45,-41,46,-41,-1,0},
    /*127*/{5,129,-1,0},
    /*128*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*129*/{6,131,29,65,30,62,31,66,32,63,-1,0},
    /*130*/{2,4,8,100,15,101,20,105,41,106,42,98,43,103,44,96,45,107,-1,0},
    /*131*/{2,-30,8,-30,9,-30,15,-30,20,-30,41,-30,42,-30,43,-30,44,-30,45,-30,46,-30,-1,0},
    /*132*/{2,-36,8,-36,9,-36,15,-36,20,-36,41,-36,42,-36,43,-36,44,-36,45,-36,46,-36,-1,0},
    /*133*/{4,135,29,65,30,62,31,66,32,63,-1,0},
    /*134*/{2,-37,8,-37,9,-37,15,-37,20,-37,41,-37,42,-37,43,-37,44,-37,45,-37,46,-37,-1,0},
    /*135*/{9,-24,-1,0},
    /*136*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*137*/{6,139,29,65,30,62,31,66,32,63,-1,0},
    /*138*/{2,4,8,100,15,101,20,105,41,106,42,98,43,103,44,96,45,107,-1,0},
    /*139*/{2,-27,8,-27,9,-27,15,-27,20,-27,41,-27,42,-27,43,-27,44,-27,45,-27,46,141,-1,0},
    /*140*/{2,4,8,100,15,101,20,105,41,106,42,98,43,103,44,96,45,107,-1,0},
    /*141*/{2,-28,8,-28,9,-28,15,-28,20,-28,41,-28,42,-28,43,-28,44,-28,45,-28,46,-28,-1,0},
    /*142*/{2,4,8,100,9,-25,15,101,20,105,41,106,42,98,43,103,44,96,45,107,-1,0},
    /*143*/{9,145,-1,0},
    /*144*/{2,-84,4,147,8,-84,9,-84,15,-84,20,-84,41,-84,42,-84,43,-84,44,-84,45,-84,46,-84,-1,0},
    /*145*/{2,-31,8,-31,9,-31,15,-31,20,-31,41,-31,42,-31,43,-31,44,-31,45,-31,46,-31,-1,0},
    /*146*/{2,-83,8,-83,9,-83,15,-83,18,-83,19,-83,20,-83,23,-83,24,-83,41,-83,42,-83,43,-83,44,-83,45,-83,46,-83,-1,0},
    /*147*/{4,154,-1,0},
    /*148*/{4,153,-1,0},
    /*149*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*150*/{4,152,29,65,30,62,31,66,32,63,-1,0},
    /*151*/{2,-26,8,-26,9,-26,15,-26,20,-26,41,-26,42,-26,43,-26,44,-26,45,-26,46,-26,-1,0},
    /*152*/{2,-32,8,-32,9,-32,15,-32,20,-32,41,-32,42,-32,43,-32,44,-32,45,-32,46,-32,-1,0},
    /*153*/{2,-33,8,-33,9,-33,15,-33,20,-33,41,-33,42,-33,43,-33,44,-33,45,-33,46,-33,-1,0},
    /*154*/{2,4,-1,0},
    /*155*/{6,-45,33,161,-1,0},
    /*156*/{6,159,-1,0},
    /*157*/{6,-79,22,60,33,-79,-1,0},
    /*158*/{4,160,-1,0},
    /*159*/{2,-34,8,-34,9,-34,15,-34,20,-34,41,-34,42,-34,43,-34,44,-34,45,-34,46,-34,-1,0},
    /*160*/{2,4,-1,0},
    /*161*/{6,-44,-1,0},
    /*162*/{4,147,9,-84,18,-84,19,-84,23,-84,24,-84,-1,0},
    /*163*/{9,-10,18,-10,19,-10,23,-10,24,-10,-1,0},
    /*164*/{4,166,-1,0},
    /*165*/{2,-38,8,-38,9,-38,15,-38,20,-38,41,-38,42,-38,43,-38,44,-38,45,-38,46,-38,-1,0},
    /*166*/{4,18,7,21,22,20,-1,0},
    /*167*/{2,-15,8,-15,9,-15,15,-15,20,-15,41,-15,42,-15,43,-15,44,-15,45,-15,-1,0},
    /*168*/{6,-13,22,170,33,-13,-1,0},
    /*169*/{21,171,-1,0},
    /*170*/{6,-14,33,-14,-1,0},
    /*171*/{2,-16,8,-16,9,-16,15,-16,18,16,19,11,20,-16,23,7,40,8,41,-16,42,-16,43,-16,44,-16,45,-16,-1,0},
    /*172*/{2,4,8,100,9,-25,15,101,20,105,41,106,42,98,43,103,44,96,45,107,-1,0},
    /*173*/{9,175,-1,0},
    /*174*/{4,147,9,-84,18,-84,19,-84,23,-84,24,-84,-1,0},
    /*175*/{9,-9,18,-9,19,-9,23,-9,24,-9,-1,0},
    /*176*/{18,16,19,11,23,7,-1,0},
    /*177*/{6,-11,-1,0},
    /*178*/{5,180,-1,0},
    /*179*/{6,181,18,16,19,11,23,7,-1,0},
    /*180*/{8,189,-1,0},
    /*181*/{6,183,-1,0},
    /*182*/{8,184,-1,0},
    /*183*/{2,-16,8,-16,9,-16,15,-16,18,16,19,11,20,-16,23,7,40,8,41,-16,42,-16,43,-16,44,-16,45,-16,-1,0},
    /*184*/{2,4,8,100,9,-25,15,101,20,105,41,106,42,98,43,103,44,96,45,107,-1,0},
    /*185*/{9,187,-1,0},
    /*186*/{4,147,9,-84,18,-84,19,-84,23,-84,24,-84,-1,0},
    /*187*/{9,-8,18,-8,19,-8,23,-8,24,-8,-1,0},
    /*188*/{2,-16,8,-16,9,-16,15,-16,18,16,19,11,20,-16,23,7,40,8,41,-16,42,-16,43,-16,44,-16,45,-16,-1,0},
    /*189*/{2,4,8,100,9,-25,15,101,20,105,41,106,42,98,43,103,44,96,45,107,-1,0},
    /*190*/{9,192,-1,0},
    /*191*/{4,147,9,-84,18,-84,19,-84,23,-84,24,-84,-1,0},
    /*192*/{9,-7,18,-7,19,-7,23,-7,24,-7,-1,0},
    /*193*/{9,-3,-1,0},
    /*194*/{0,-2,-1,0},
    /*195*/{9,-5,-1,0},
    /*196*/{2,4,-1,0},
    /*197*/{5,19,-1,0},
    /*198*/{7,200,-1,0},
    /*199*/{2,4,3,29,5,27,35,36,36,22,37,24,47,37,48,23,49,25,-1,0},
    /*200*/{4,202,29,65,30,62,31,66,32,63,-1,0},
    /*201*/{2,-20,8,-20,9,-20,15,-20,18,-20,19,-20,20,-20,23,-20,24,-20,40,-20,41,-20,42,-20,43,-20,44,-20,45,-20,-1,0},
    /*202*/{0,-1,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,1,-1,-1},
    /*1*/{-1,-1},
    /*2*/{6,4,-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{8,11,9,14,20,12,21,9,24,8,-1,-1},
    /*6*/{-1,-1},
    /*7*/{6,198,-1,-1},
    /*8*/{9,196,20,195,24,8,-1,-1},
    /*9*/{-1,-1},
    /*10*/{-1,-1},
    /*11*/{8,11,9,14,20,12,21,193,24,8,-1,-1},
    /*12*/{-1,-1},
    /*13*/{6,178,-1,-1},
    /*14*/{6,16,-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{9,88,22,86,23,89,-1,-1},
    /*19*/{11,83,-1,-1},
    /*20*/{4,25,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{5,31,6,29,11,32,12,37,13,82,-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{4,77,5,31,6,29,9,76,11,32,12,37,13,27,14,30,15,33,16,34,-1,-1},
    /*27*/{-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{5,31,6,29,11,32,12,37,13,27,14,30,15,57,-1,-1},
    /*39*/{5,31,6,29,11,32,12,37,13,27,14,30,15,56,-1,-1},
    /*40*/{5,31,6,29,11,32,12,37,13,27,14,30,15,55,-1,-1},
    /*41*/{5,31,6,29,11,32,12,37,13,27,14,30,15,54,-1,-1},
    /*42*/{5,31,6,29,11,32,12,37,13,27,14,53,-1,-1},
    /*43*/{5,31,6,29,11,32,12,37,13,27,14,30,15,52,-1,-1},
    /*44*/{5,31,6,29,11,32,12,37,13,27,14,30,15,51,-1,-1},
    /*45*/{5,31,6,29,11,32,12,37,13,27,14,46,-1,-1},
    /*46*/{-1,-1},
    /*47*/{5,31,6,29,11,32,12,37,13,50,-1,-1},
    /*48*/{5,31,6,29,11,32,12,37,13,49,-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{-1,-1},
    /*58*/{4,72,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,19,70,-1,-1},
    /*59*/{4,60,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,-1,-1},
    /*60*/{-1,-1},
    /*61*/{5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,69,-1,-1},
    /*62*/{5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,68,-1,-1},
    /*63*/{-1,-1},
    /*64*/{5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,67,-1,-1},
    /*65*/{5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,66,-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{4,72,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,19,74,-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{5,31,6,29,11,32,12,37,13,80,-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
    /*88*/{6,168,-1,-1},
    /*89*/{-1,-1},
    /*90*/{-1,-1},
    /*91*/{7,94,8,92,9,93,-1,-1},
    /*92*/{7,167,8,92,9,93,-1,-1},
    /*93*/{6,166,-1,-1},
    /*94*/{2,96,3,101,6,103,12,98,-1,-1},
    /*95*/{6,164,-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{7,142,8,92,9,93,-1,-1},
    /*100*/{-1,-1},
    /*101*/{2,135,3,101,6,103,12,98,-1,-1},
    /*102*/{4,133,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{6,107,-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{4,110,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,17,111,-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{4,110,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,17,115,-1,-1},
    /*115*/{-1,-1},
    /*116*/{4,117,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,-1,-1},
    /*117*/{-1,-1},
    /*118*/{3,119,6,103,12,98,-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{4,72,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,19,122,-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{4,129,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,-1,-1},
    /*129*/{-1,-1},
    /*130*/{3,131,6,103,12,98,-1,-1},
    /*131*/{-1,-1},
    /*132*/{-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{4,137,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,-1,-1},
    /*137*/{-1,-1},
    /*138*/{3,139,6,103,12,98,-1,-1},
    /*139*/{-1,-1},
    /*140*/{3,141,6,103,12,98,-1,-1},
    /*141*/{-1,-1},
    /*142*/{2,143,3,101,6,103,12,98,-1,-1},
    /*143*/{-1,-1},
    /*144*/{10,145,-1,-1},
    /*145*/{-1,-1},
    /*146*/{-1,-1},
    /*147*/{-1,-1},
    /*148*/{-1,-1},
    /*149*/{4,150,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,-1,-1},
    /*150*/{-1,-1},
    /*151*/{-1,-1},
    /*152*/{-1,-1},
    /*153*/{-1,-1},
    /*154*/{6,157,12,155,18,156,-1,-1},
    /*155*/{-1,-1},
    /*156*/{-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{-1,-1},
    /*160*/{6,157,12,155,18,161,-1,-1},
    /*161*/{-1,-1},
    /*162*/{10,163,-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{-1,-1},
    /*166*/{-1,-1},
    /*167*/{-1,-1},
    /*168*/{-1,-1},
    /*169*/{-1,-1},
    /*170*/{-1,-1},
    /*171*/{7,172,8,92,9,93,-1,-1},
    /*172*/{2,173,3,101,6,103,12,98,-1,-1},
    /*173*/{-1,-1},
    /*174*/{10,175,-1,-1},
    /*175*/{-1,-1},
    /*176*/{9,88,22,86,23,177,-1,-1},
    /*177*/{-1,-1},
    /*178*/{-1,-1},
    /*179*/{9,88,22,86,23,181,-1,-1},
    /*180*/{-1,-1},
    /*181*/{-1,-1},
    /*182*/{-1,-1},
    /*183*/{7,184,8,92,9,93,-1,-1},
    /*184*/{2,185,3,101,6,103,12,98,-1,-1},
    /*185*/{-1,-1},
    /*186*/{10,187,-1,-1},
    /*187*/{-1,-1},
    /*188*/{7,189,8,92,9,93,-1,-1},
    /*189*/{2,190,3,101,6,103,12,98,-1,-1},
    /*190*/{-1,-1},
    /*191*/{10,192,-1,-1},
    /*192*/{-1,-1},
    /*193*/{-1,-1},
    /*194*/{-1,-1},
    /*195*/{-1,-1},
    /*196*/{6,197,-1,-1},
    /*197*/{-1,-1},
    /*198*/{-1,-1},
    /*199*/{4,200,5,31,6,29,11,32,12,37,13,27,14,30,15,33,16,34,-1,-1},
    /*200*/{-1,-1},
    /*201*/{-1,-1},
    /*202*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {
              
    }

  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return Scanner.next_token(); 
    }


 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),  
			null);
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {

  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // optionalSemi ::= 
            {
              Symbol RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(10/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // optionalSemi ::= SEMI 
            {
              Symbol RESULT = null;

              CUP$result = new java_cup.runtime.Symbol(10/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // intliteral ::= INTLIT 
            {
              intLitNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXIntLitToken i = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new intLitNode(i.intValue, i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(11/*intliteral*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ident ::= IDENTIFIER 
            {
              identNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new identNode(i.identifierText,
									   i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(6/*ident*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // name ::= ident LBRACKET exp RBRACKET 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new nameNode(i,e,i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(12/*name*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // name ::= ident 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new nameNode(i,exprNode.NULL,i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(12/*name*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unit ::= name 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = n; 
              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unit ::= ident LPAREN args RPAREN 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new fctCallNode(i, a, i.linenum, i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unit ::= ident LPAREN RPAREN 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new fctCallNode(i, argsNode.NULL, i.linenum, i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unit ::= CHARLIT 
            {
              exprNode RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXCharLitToken cl = (CSXCharLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new charLitNode(cl.charValue,cl.linenum,cl.colnum); 
              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unit ::= STRLIT 
            {
              exprNode RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXStringLitToken sl = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new strLitNode(sl.stringText,sl.linenum,sl.colnum); 
              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unit ::= INT_BITSTR 
            {
              exprNode RESULT = null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXBitStringToken bs = (CSXBitStringToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new bitStringNode(bs.intValue,bs.bitString,bs.linenum,bs.colnum); 
              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unit ::= rw_FALSE 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken f = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new falseNode(f.linenum,f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unit ::= rw_TRUE 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new trueNode(t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unit ::= intliteral 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		intLitNode l = (intLitNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = l; 
              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unit ::= LPAREN exp RPAREN 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = e; 
              CUP$result = new java_cup.runtime.Symbol(5/*unit*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unary ::= LPAREN type RPAREN unary 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new castNode(t,u,l.linenum,l.colnum); 
              CUP$result = new java_cup.runtime.Symbol(13/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unary ::= NOT unary 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken n = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new unaryOpNode(sym.NOT,u,n.linenum,n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(13/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unary ::= unit 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = u; 
              CUP$result = new java_cup.runtime.Symbol(13/*unary*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pri ::= unary 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = u; 
              CUP$result = new java_cup.runtime.Symbol(14/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pri ::= pri SLASH unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(p,sym.SLASH,u,o.linenum,o.colnum); 
              CUP$result = new java_cup.runtime.Symbol(14/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pri ::= pri TIMES unary 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(p,sym.TIMES,u,o.linenum,o.colnum); 
              CUP$result = new java_cup.runtime.Symbol(14/*pri*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= pri 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = p; 
              CUP$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= factor MINUS pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(f,sym.MINUS,p,o.linenum,o.colnum); 
              CUP$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= factor PLUS pri 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(f,sym.PLUS,p,o.linenum,o.colnum); 
              CUP$result = new java_cup.runtime.Symbol(15/*factor*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = f; 
              CUP$result = new java_cup.runtime.Symbol(16/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= factor NOTEQ factor 
            {
              exprNode RESULT = null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode lf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(lf,sym.NOTEQ,rf,o.linenum,o.colnum); 
              CUP$result = new java_cup.runtime.Symbol(16/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor EQ factor 
            {
              exprNode RESULT = null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode lf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(lf,sym.EQ,rf,o.linenum,o.colnum); 
              CUP$result = new java_cup.runtime.Symbol(16/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor GEQ factor 
            {
              exprNode RESULT = null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode lf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(lf,sym.GEQ,rf,o.linenum,o.colnum); 
              CUP$result = new java_cup.runtime.Symbol(16/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor LEQ factor 
            {
              exprNode RESULT = null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode lf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(lf,sym.LEQ,rf,o.linenum,o.colnum); 
              CUP$result = new java_cup.runtime.Symbol(16/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= factor GT factor 
            {
              exprNode RESULT = null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode lf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(lf,sym.GT,rf,o.linenum,o.colnum); 
              CUP$result = new java_cup.runtime.Symbol(16/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor LT factor 
            {
              exprNode RESULT = null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode lf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken o = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rf = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new binaryOpNode(lf,sym.LT,rf,o.linenum,o.colnum); 
              CUP$result = new java_cup.runtime.Symbol(16/*term*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= term 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = t; 
              CUP$result = new java_cup.runtime.Symbol(4/*exp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp AND term 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.AND,rightval,op.linenum,op.colnum); 
              CUP$result = new java_cup.runtime.Symbol(4/*exp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp OR term 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.OR,rightval,op.linenum,op.colnum); 
              CUP$result = new java_cup.runtime.Symbol(4/*exp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp CAND term 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.CAND,rightval,op.linenum,op.colnum); 
              CUP$result = new java_cup.runtime.Symbol(4/*exp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp COR term 
            {
              exprNode RESULT = null;
		int leftvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int leftvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode leftval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int rightvalleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rightvalright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode rightval = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new binaryOpNode(leftval,sym.COR,rightval,op.linenum,op.colnum); 
              CUP$result = new java_cup.runtime.Symbol(4/*exp*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // printlist ::= exp 
            {
              printNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new printNode(e,printNode.NULL,e.linenum,e.colnum); 
              CUP$result = new java_cup.runtime.Symbol(17/*printlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // printlist ::= exp COMMA printlist 
            {
              printNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		printNode pl = (printNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new printNode(e,pl,e.linenum,e.colnum); 
              CUP$result = new java_cup.runtime.Symbol(17/*printlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // readlist ::= name 
            {
              readNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new readNode(n,readNode.NULL,n.linenum,n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(18/*readlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // readlist ::= name COMMA readlist 
            {
              readNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		readNode rl = (readNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new readNode(n,rl,n.linenum,n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(18/*readlist*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // args ::= exp 
            {
              argsNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new argsNode(e,argsNode.NULL,e.linenum,e.colnum); 
              CUP$result = new java_cup.runtime.Symbol(19/*args*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // args ::= exp COMMA args 
            {
              argsNodeOption RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new argsNode(e,a,e.linenum,e.colnum); 
              CUP$result = new java_cup.runtime.Symbol(19/*args*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= ident LPAREN args RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		argsNodeOption a = (argsNodeOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new callNode(i,a,i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= ident LPAREN RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		 RESULT = new callNode(i,argsNode.NULL,i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= rw_CONTINUE ident SEMI 
            {
              stmtNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new continueNode(i,c.linenum,c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= rw_BREAK ident SEMI 
            {
              stmtNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken b = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new breakNode(i,b.linenum,b.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= rw_RETURN exp SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new returnNode(e,r.linenum,r.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= rw_RETURN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new returnNode(exprNode.NULL,r.linenum,r.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= rw_PRINT LPAREN printlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken p = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		printNode pl = (printNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new printNode(pl.outputValue,pl.morePrints,p.linenum,p.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= rw_READ LPAREN readlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken r = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		readNode rl = (readNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new readNode(rl.targetVar,rl.moreReads,r.linenum,r.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= name DECREMENT SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new decrementNode(n,n.linenum,n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= name INCREMENT SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new incrementNode(n,n.linenum,n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		
	  				 RESULT=new blockNode(f,s, l.linenum, l.colnum);
        	 	
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= ident COLON rw_WHILE LPAREN exp RPAREN stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			 	 RESULT=new whileNode(i, e, s, i.linenum, i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= rw_WHILE LPAREN exp RPAREN stmt 
            {
              stmtNode RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken w = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
			 	 RESULT=new whileNode(exprNode.NULL,e,s,w.linenum,w.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= rw_IF LPAREN exp RPAREN stmt rw_ELSE stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s2 = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new ifThenNode(e,s1,s2,i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= rw_IF LPAREN exp RPAREN stmt 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=new ifThenNode(e,s,stmtNode.NULL, i.linenum,i.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= name ASG exp SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT= new asgNode(n,e,n.linenum,n.colnum); 
              CUP$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmts ::= 
            {
              stmtsOption RESULT = null;
		 RESULT= stmtsNode.NULL; 
              CUP$result = new java_cup.runtime.Symbol(2/*stmts*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmts ::= stmt stmts 
            {
              stmtsOption RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		stmtsOption s2 = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=
			new stmtsNode(s1,s2,s1.linenum,s1.colnum);
			 
              CUP$result = new java_cup.runtime.Symbol(2/*stmts*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= rw_CHAR 
            {
              typeNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new charTypeNode(c.linenum,c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(9/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= rw_BOOL 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	  				 RESULT=new boolTypeNode(t.linenum, t.colnum);
         		
              CUP$result = new java_cup.runtime.Symbol(9/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= rw_INT 
            {
              typeNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		CSXToken t = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		
	  				 RESULT=new intTypeNode(t.linenum, t.colnum);
         		
              CUP$result = new java_cup.runtime.Symbol(9/*type*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fielddecl ::= rw_CONST ident ASG exp SEMI 
            {
              declNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new constDeclNode(i, e, c.linenum, c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(8/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fielddecl ::= type ident LBRACKET intliteral RBRACKET SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		intLitNode ilit = (intLitNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new arrayDeclNode(i,t,ilit,t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(8/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-5)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fielddecl ::= type ident ASG exp SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT = new varDeclNode(i,t,e,t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(8/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fielddecl ::= type ident SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT=
					new varDeclNode(i,t,exprNode.NULL, t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(8/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fielddecls ::= 
            {
              fieldDeclsOption RESULT = null;
		 RESULT=
					fieldDeclsNode.NULL; 
              CUP$result = new java_cup.runtime.Symbol(7/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fielddecls ::= fielddecl fielddecls 
            {
              fieldDeclsOption RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		declNode f1 = (declNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		fieldDeclsOption f2 = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT=
					new fieldDeclsNode(f1,f2, f1.linenum,f1.colnum); 
              CUP$result = new java_cup.runtime.Symbol(7/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // argdecl ::= type ident LBRACKET RBRACKET 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new arrayArgDeclNode(i,t,t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(22/*argdecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // argdecl ::= type ident 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new valArgDeclNode(i,t,t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(22/*argdecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // argdecls ::= argdecl 
            {
              argDeclsOption RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argDeclNode a = (argDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new argDeclsNode(a,argDeclsNode.NULL,a.linenum,a.colnum); 
              CUP$result = new java_cup.runtime.Symbol(23/*argdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // argdecls ::= argdecl COMMA argdecls 
            {
              argDeclsOption RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		argDeclNode a = (argDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		argDeclsOption as = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new argDeclsNode(a,as,a.linenum,a.colnum); 
              CUP$result = new java_cup.runtime.Symbol(23/*argdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methoddecl ::= type ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		argDeclsOption a = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new methodDeclNode(i,a,t,f,s,t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(24/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methoddecl ::= type ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new methodDeclNode(i,argDeclsNode.NULL,t,f,s,t.linenum,t.colnum); 
              CUP$result = new java_cup.runtime.Symbol(24/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methoddecl ::= rw_VOID ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-6)).right;
		argDeclsOption a = (argDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new methodDeclNode(i,a,new voidTypeNode(v.linenum,v.colnum),f,s,v.linenum,v.colnum); 
              CUP$result = new java_cup.runtime.Symbol(24/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-9)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecl ::= rw_VOID ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).right;
		CSXToken v = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		fieldDeclsOption f = (fieldDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		stmtsOption s = (stmtsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		 RESULT = new methodDeclNode(i,argDeclsNode.NULL,new voidTypeNode(v.linenum,v.colnum),f,s,v.linenum,v.colnum); 
              CUP$result = new java_cup.runtime.Symbol(24/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-8)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // methoddecls ::= 
            {
              methodDeclsOption RESULT = null;
		 RESULT = methodDeclsNode.NULL; 
              CUP$result = new java_cup.runtime.Symbol(20/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // methoddecls ::= methoddecl methoddecls 
            {
              methodDeclsOption RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		methodDeclNode m = (methodDeclNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		methodDeclsOption mds = (methodDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new methodDeclsNode(m,mds,m.linenum,m.colnum); 
              CUP$result = new java_cup.runtime.Symbol(20/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= methoddecls 
            {
              memberDeclsNode RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		methodDeclsOption m = (methodDeclsOption)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new memberDeclsNode(fieldDeclsNode.NULL,m,m.linenum,m.colnum); 
              CUP$result = new java_cup.runtime.Symbol(21/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecl memberdecls 
            {
              memberDeclsNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		declNode f = (declNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-0)).value;
		 RESULT = new memberDeclsNode(new fieldDeclsNode(f, m.fields, f.linenum, f.colnum), 
			 		m.methods, f.linenum, f.colnum); 
              CUP$result = new java_cup.runtime.Symbol(21/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= rw_CLASS ident LBRACE memberdecls RBRACE 
            {
              classNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-2)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		 RESULT=
				new classNode(i, m, c.linenum, c.colnum); 
              CUP$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-4)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).right;
		classNode start_val = (classNode)((java_cup.runtime.Symbol) CUP$stack.elementAt(CUP$top-1)).value;
		RESULT = start_val;
              CUP$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-1)).left, ((java_cup.runtime.Symbol)CUP$stack.elementAt(CUP$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

